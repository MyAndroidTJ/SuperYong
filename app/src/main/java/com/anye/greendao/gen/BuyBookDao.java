package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sxzx.GreenDao.BuyBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUY_BOOK".
*/
public class BuyBookDao extends AbstractDao<BuyBook, Long> {

    public static final String TABLENAME = "BUY_BOOK";

    /**
     * Properties of entity BuyBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Book_id = new Property(1, String.class, "book_id", false, "BOOK_ID");
        public final static Property Book_name = new Property(2, String.class, "book_name", false, "BOOK_NAME");
        public final static Property Book_pic = new Property(3, String.class, "book_pic", false, "BOOK_PIC");
        public final static Property Book_author = new Property(4, String.class, "book_author", false, "BOOK_AUTHOR");
        public final static Property Book_description = new Property(5, String.class, "book_description", false, "BOOK_DESCRIPTION");
        public final static Property Book_read = new Property(6, String.class, "book_read", false, "BOOK_READ");
        public final static Property Book_new_price = new Property(7, String.class, "book_new_price", false, "BOOK_NEW_PRICE");
        public final static Property Book_epub_free = new Property(8, String.class, "book_epub_free", false, "BOOK_EPUB_FREE");
        public final static Property Book_pdf_free = new Property(9, String.class, "book_pdf_free", false, "BOOK_PDF_FREE");
        public final static Property Book_pdf_money = new Property(10, String.class, "book_pdf_money", false, "BOOK_PDF_MONEY");
        public final static Property Book_epub_money = new Property(11, String.class, "book_epub_money", false, "BOOK_EPUB_MONEY");
        public final static Property Pay = new Property(12, String.class, "pay", false, "PAY");
        public final static Property Bookcase = new Property(13, String.class, "bookcase", false, "BOOKCASE");
        public final static Property Book_path = new Property(14, String.class, "book_path", false, "BOOK_PATH");
        public final static Property Book_size = new Property(15, String.class, "book_size", false, "BOOK_SIZE");
    };


    public BuyBookDao(DaoConfig config) {
        super(config);
    }
    
    public BuyBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUY_BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_ID\" TEXT NOT NULL ," + // 1: book_id
                "\"BOOK_NAME\" TEXT," + // 2: book_name
                "\"BOOK_PIC\" TEXT," + // 3: book_pic
                "\"BOOK_AUTHOR\" TEXT," + // 4: book_author
                "\"BOOK_DESCRIPTION\" TEXT," + // 5: book_description
                "\"BOOK_READ\" TEXT," + // 6: book_read
                "\"BOOK_NEW_PRICE\" TEXT," + // 7: book_new_price
                "\"BOOK_EPUB_FREE\" TEXT," + // 8: book_epub_free
                "\"BOOK_PDF_FREE\" TEXT," + // 9: book_pdf_free
                "\"BOOK_PDF_MONEY\" TEXT," + // 10: book_pdf_money
                "\"BOOK_EPUB_MONEY\" TEXT," + // 11: book_epub_money
                "\"PAY\" TEXT," + // 12: pay
                "\"BOOKCASE\" TEXT," + // 13: bookcase
                "\"BOOK_PATH\" TEXT," + // 14: book_path
                "\"BOOK_SIZE\" TEXT);"); // 15: book_size
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUY_BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BuyBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBook_id());
 
        String book_name = entity.getBook_name();
        if (book_name != null) {
            stmt.bindString(3, book_name);
        }
 
        String book_pic = entity.getBook_pic();
        if (book_pic != null) {
            stmt.bindString(4, book_pic);
        }
 
        String book_author = entity.getBook_author();
        if (book_author != null) {
            stmt.bindString(5, book_author);
        }
 
        String book_description = entity.getBook_description();
        if (book_description != null) {
            stmt.bindString(6, book_description);
        }
 
        String book_read = entity.getBook_read();
        if (book_read != null) {
            stmt.bindString(7, book_read);
        }
 
        String book_new_price = entity.getBook_new_price();
        if (book_new_price != null) {
            stmt.bindString(8, book_new_price);
        }
 
        String book_epub_free = entity.getBook_epub_free();
        if (book_epub_free != null) {
            stmt.bindString(9, book_epub_free);
        }
 
        String book_pdf_free = entity.getBook_pdf_free();
        if (book_pdf_free != null) {
            stmt.bindString(10, book_pdf_free);
        }
 
        String book_pdf_money = entity.getBook_pdf_money();
        if (book_pdf_money != null) {
            stmt.bindString(11, book_pdf_money);
        }
 
        String book_epub_money = entity.getBook_epub_money();
        if (book_epub_money != null) {
            stmt.bindString(12, book_epub_money);
        }
 
        String pay = entity.getPay();
        if (pay != null) {
            stmt.bindString(13, pay);
        }
 
        String bookcase = entity.getBookcase();
        if (bookcase != null) {
            stmt.bindString(14, bookcase);
        }
 
        String book_path = entity.getBook_path();
        if (book_path != null) {
            stmt.bindString(15, book_path);
        }
 
        String book_size = entity.getBook_size();
        if (book_size != null) {
            stmt.bindString(16, book_size);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BuyBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBook_id());
 
        String book_name = entity.getBook_name();
        if (book_name != null) {
            stmt.bindString(3, book_name);
        }
 
        String book_pic = entity.getBook_pic();
        if (book_pic != null) {
            stmt.bindString(4, book_pic);
        }
 
        String book_author = entity.getBook_author();
        if (book_author != null) {
            stmt.bindString(5, book_author);
        }
 
        String book_description = entity.getBook_description();
        if (book_description != null) {
            stmt.bindString(6, book_description);
        }
 
        String book_read = entity.getBook_read();
        if (book_read != null) {
            stmt.bindString(7, book_read);
        }
 
        String book_new_price = entity.getBook_new_price();
        if (book_new_price != null) {
            stmt.bindString(8, book_new_price);
        }
 
        String book_epub_free = entity.getBook_epub_free();
        if (book_epub_free != null) {
            stmt.bindString(9, book_epub_free);
        }
 
        String book_pdf_free = entity.getBook_pdf_free();
        if (book_pdf_free != null) {
            stmt.bindString(10, book_pdf_free);
        }
 
        String book_pdf_money = entity.getBook_pdf_money();
        if (book_pdf_money != null) {
            stmt.bindString(11, book_pdf_money);
        }
 
        String book_epub_money = entity.getBook_epub_money();
        if (book_epub_money != null) {
            stmt.bindString(12, book_epub_money);
        }
 
        String pay = entity.getPay();
        if (pay != null) {
            stmt.bindString(13, pay);
        }
 
        String bookcase = entity.getBookcase();
        if (bookcase != null) {
            stmt.bindString(14, bookcase);
        }
 
        String book_path = entity.getBook_path();
        if (book_path != null) {
            stmt.bindString(15, book_path);
        }
 
        String book_size = entity.getBook_size();
        if (book_size != null) {
            stmt.bindString(16, book_size);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BuyBook readEntity(Cursor cursor, int offset) {
        BuyBook entity = new BuyBook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // book_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // book_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // book_pic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // book_author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // book_description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // book_read
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // book_new_price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // book_epub_free
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // book_pdf_free
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // book_pdf_money
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // book_epub_money
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pay
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // bookcase
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // book_path
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // book_size
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BuyBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBook_id(cursor.getString(offset + 1));
        entity.setBook_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBook_pic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBook_author(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBook_description(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBook_read(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBook_new_price(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBook_epub_free(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBook_pdf_free(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBook_pdf_money(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBook_epub_money(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPay(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBookcase(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBook_path(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBook_size(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BuyBook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BuyBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
